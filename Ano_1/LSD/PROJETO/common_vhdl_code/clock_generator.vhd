----------------------------------------------------------------------------------------------------------------------------------------------------------------
-- LSD.TOS, March 2017 (DO NOT REMOVE THIS LINE)
--
-- Generic clock generator (using a Phase Locked Loop) for the DE2-115 board.
--
-- The PLL was generated by the Quartus Prime IP wizard (ALTPLL) for a test frequency, and then made generic.
--
-- Warning: the actual output frequency may not be exactly the one requested (but it should be close).
--
-- Do NOT instantiate more than one PLL for a given frequency.
-- If possible, use only ONE clock to drive all sequential logic in your design.
-- The FPGA of the DE2-115 board has 4 PLLs (each can generate several related clock signals; here only one is generated per PLL).
--
-- The actual PLL parameters can be extracted from "Compilation Report -> Fitter -> Resource Section -> PLL Summary/Usage".
--

library ieee;
use     ieee.std_logic_1164.all;

library altera_mf;
use     altera_mf.all;

entity clock_generator is
  generic
  (
    frequency : real range 1.0e6 to 200.0e6 -- (in Hz) desired frequency
  );
  port
  (
    clock_50  : in  std_logic; -- 50 MHz clock
    new_clock : out std_logic  -- output clock (its frequency may not be exactly the one requested)
  );
end clock_generator;

architecture cyclone4e of clock_generator is
  --
  -- Internal signals
  --
  signal sub_wire0    : std_logic_vector (4 downto 0);
  signal sub_wire1    : std_logic ;
  signal sub_wire2    : std_logic ;
  signal sub_wire3    : std_logic ;
  signal sub_wire4    : std_logic_vector (1 downto 0);
  signal sub_wire5_bv : bit_vector (0 downto 0);
  signal sub_wire5    : std_logic_vector (0 downto 0);
  --
  -- The Cyclone IV E ALTPLL component
  --
  component altpll
    generic
    (
      bandwidth_type          : string;
      clk0_divide_by          : natural;
      clk0_duty_cycle         : natural;
      clk0_multiply_by        : natural;
      clk0_phase_shift        : string;
      compensate_clock        : string;
      inclk0_input_frequency  : natural;
      intended_device_family  : string;
      lpm_hint                : string;
      lpm_type                : string;
      operation_mode          : string;
      pll_type                : string;
      port_activeclock        : string;
      port_areset             : string;
      port_clkbad0            : string;
      port_clkbad1            : string;
      port_clkloss            : string;
      port_clkswitch          : string;
      port_configupdate       : string;
      port_fbin               : string;
      port_inclk0             : string;
      port_inclk1             : string;
      port_locked             : string;
      port_pfdena             : string;
      port_phasecounterselect : string;
      port_phasedone          : string;
      port_phasestep          : string;
      port_phaseupdown        : string;
      port_pllena             : string;
      port_scanaclr           : string;
      port_scanclk            : string;
      port_scanclkena         : string;
      port_scandata           : string;
      port_scandataout        : string;
      port_scandone           : string;
      port_scanread           : string;
      port_scanwrite          : string;
      port_clk0               : string;
      port_clk1               : string;
      port_clk2               : string;
      port_clk3               : string;
      port_clk4               : string;
      port_clk5               : string;
      port_clkena0            : string;
      port_clkena1            : string;
      port_clkena2            : string;
      port_clkena3            : string;
      port_clkena4            : string;
      port_clkena5            : string;
      port_extclk0            : string;
      port_extclk1            : string;
      port_extclk2            : string;
      port_extclk3            : string;
      self_reset_on_loss_lock : string;
      width_clock             : natural
    );
    port
    (
      inclk  : in  std_logic_vector (1 downto 0);
      clk    : out std_logic_vector (4 downto 0)
    );
  end component;
begin
  --
  -- Connections
  --
  sub_wire5_bv(0 downto 0) <= "0";
  sub_wire5                <= to_stdlogicvector(sub_wire5_bv);
  sub_wire1                <= sub_wire0(0);
  new_clock                <= sub_wire1;
  sub_wire3                <= clock_50;
  sub_wire4                <= sub_wire5(0 downto 0) & sub_wire3;
  --
  -- The Altera (now Intel!) PLL
  --
  PLL : altpll
    generic map
    (
      bandwidth_type          => "AUTO",
      clk0_divide_by          => 50000000,
      clk0_duty_cycle         => 50,
      clk0_multiply_by        => integer(frequency),
      clk0_phase_shift        => "0",
      compensate_clock        => "CLK0",
      inclk0_input_frequency  => 20000, -- not the true frequency!
      intended_device_family  => "Cyclone IV E",
      lpm_hint                => "CBX_MODULE_PREFIX=clock_auto", -- could be something more informative about the use to be given to the new clock
      lpm_type                => "altpll",
      operation_mode          => "NORMAL",
      pll_type                => "AUTO",
      port_activeclock        => "PORT_UNUSED",
      port_areset             => "PORT_UNUSED",
      port_clkbad0            => "PORT_UNUSED",
      port_clkbad1            => "PORT_UNUSED",
      port_clkloss            => "PORT_UNUSED",
      port_clkswitch          => "PORT_UNUSED",
      port_configupdate       => "PORT_UNUSED",
      port_fbin               => "PORT_UNUSED",
      port_inclk0             => "PORT_USED",
      port_inclk1             => "PORT_UNUSED",
      port_locked             => "PORT_USED",
      port_pfdena             => "PORT_UNUSED",
      port_phasecounterselect => "PORT_UNUSED",
      port_phasedone          => "PORT_UNUSED",
      port_phasestep          => "PORT_UNUSED",
      port_phaseupdown        => "PORT_UNUSED",
      port_pllena             => "PORT_UNUSED",
      port_scanaclr           => "PORT_UNUSED",
      port_scanclk            => "PORT_UNUSED",
      port_scanclkena         => "PORT_UNUSED",
      port_scandata           => "PORT_UNUSED",
      port_scandataout        => "PORT_UNUSED",
      port_scandone           => "PORT_UNUSED",
      port_scanread           => "PORT_UNUSED",
      port_scanwrite          => "PORT_UNUSED",
      port_clk0               => "PORT_USED",
      port_clk1               => "PORT_UNUSED",
      port_clk2               => "PORT_UNUSED",
      port_clk3               => "PORT_UNUSED",
      port_clk4               => "PORT_UNUSED",
      port_clk5               => "PORT_UNUSED",
      port_clkena0            => "PORT_UNUSED",
      port_clkena1            => "PORT_UNUSED",
      port_clkena2            => "PORT_UNUSED",
      port_clkena3            => "PORT_UNUSED",
      port_clkena4            => "PORT_UNUSED",
      port_clkena5            => "PORT_UNUSED",
      port_extclk0            => "PORT_UNUSED",
      port_extclk1            => "PORT_UNUSED",
      port_extclk2            => "PORT_UNUSED",
      port_extclk3            => "PORT_UNUSED",
      self_reset_on_loss_lock => "OFF",
      width_clock             => 5
    )
    port map
    (
      inclk  => sub_wire4,
      clk    => sub_wire0
    );
end cyclone4e;
